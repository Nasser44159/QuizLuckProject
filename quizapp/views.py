from django.shortcuts import render
from django.http import Http404
import os, re
import random
from django.db import models
from quizapp.utils import get_valid_pagemodules
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.models import User  # Mod√®le utilisateur par d√©faut
from .models import QuizScore, Exam, ExamResult, Comment
from django.contrib.auth.decorators import login_required
import json
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from django.contrib import messages
from django.contrib.auth.hashers import make_password
from datetime import datetime
from django.shortcuts import render, get_object_or_404
import logging
from django.conf import settings
from quizapp.models import Question, QuestionAttempt, Choice, Subject, UserSemester, Module, Semester, Profile
from django.db.models import Count
from random import sample
from django.http import HttpResponse
from django.utils.timezone import localtime
from django.core.mail import send_mail
from .models import Message
from django.http import HttpResponseForbidden
from quizapp.models import UncorrectedQuestion, UncorrectedChoice, UserResponse
from django.db.models import Max, Subquery, OuterRef
from .models import Module, Chapter, Flashcard
from cryptography.fernet import Fernet
import base64
from datetime import timedelta
from django.utils.timezone import now
from django.contrib.auth.hashers import make_password, check_password

ENCRYPTION_KEY = base64.urlsafe_b64encode(Fernet.generate_key()).decode()

# Charger la cl√© Fernet pour le chiffrement des mots de passe
cipher_suite = Fernet(settings.FERNET_SECRET_KEY.encode())

def is_strong_password(password):
    """V√©rifie si le mot de passe respecte les r√®gles de s√©curit√©."""
    if len(password) < 8:
        return "Le mot de passe doit contenir au moins 8 caract√®res."
    if not re.search(r"[A-Z]", password):
        return "Le mot de passe doit contenir au moins une majuscule."
    if not re.search(r"\d", password):
        return "Le mot de passe doit contenir au moins un chiffre."
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        return "Le mot de passe doit contenir au moins un caract√®re sp√©cial."
    return None  # ‚úÖ Le mot de passe est valide

def register(request):
    if request.method == "POST":
        email = request.POST.get("email")
        password = request.POST.get("password")
        confirm_password = request.POST.get("confirm_password")
        first_name = request.POST.get("first_name").strip()
        last_name = request.POST.get("last_name").strip()
        birth_date = request.POST.get("birth_date")
        establishment = request.POST.get("establishment")  # ‚úÖ R√©cup√©ration de l‚Äô√©tablissement

        username = generate_unique_username(first_name, last_name)

        form_data = {
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "birth_date": birth_date,
            "establishment": establishment,  # ‚úÖ Stocker l'√©tablissement dans les donn√©es du formulaire
        }

        errors = []

        # V√©rification des champs obligatoires
        if not all([email, password, confirm_password, first_name, last_name, birth_date, establishment]):
            errors.append("Tous les champs sont obligatoires.")

        # V√©rifier si l'email est d√©j√† utilis√©
        if User.objects.filter(email=email).exists():
            errors.append("Cet email est d√©j√† utilis√©.")

        # V√©rifier si les mots de passe correspondent
        if password != confirm_password:
            errors.append("Les mots de passe ne correspondent pas.")

        # V√©rifier la complexit√© du mot de passe
        if len(password) < 8:
            errors.append("Le mot de passe doit contenir au moins 8 caract√®res.")
        if not re.search(r"\d", password):
            errors.append("Le mot de passe doit contenir au moins un chiffre.")
        if not re.search(r"[A-Z]", password):
            errors.append("Le mot de passe doit contenir au moins une majuscule.")
        if not re.search(r"[^a-zA-Z0-9]", password):
            errors.append("Le mot de passe doit contenir au moins un caract√®re sp√©cial.")

        # Afficher toutes les erreurs en une seule fois
        if errors:
            return render(request, "register.html", {"form_data": form_data, "errors": errors})

        # Convertir la date de naissance
        try:
            birth_date = datetime.strptime(birth_date, "%Y-%m-%d").date()
        except ValueError:
            errors.append("La date de naissance doit √™tre au format JJ-MM-AAAA.")
            return render(request, "register.html", {"form_data": form_data, "errors": errors})

        try:
            # ‚úÖ Cr√©ation de l'utilisateur
            user = User.objects.create(
                username=username,
                email=email,
                password=make_password(password),
                first_name=first_name,
                last_name=last_name,
            )

            # ‚úÖ Cr√©ation du profil utilisateur avec l'√©tablissement choisi
            profile, created = Profile.objects.get_or_create(
                user=user,
                defaults={'birth_date': birth_date, 'establishment': establishment}
            )

            if not created:
                profile.birth_date = birth_date
                profile.establishment = establishment  # ‚úÖ Mise √† jour de l‚Äô√©tablissement
                profile.save()

            # ‚úÖ Chiffrement du mot de passe
            profile.encrypted_password = cipher_suite.encrypt(password.encode()).decode()
            profile.save()

            messages.success(request, "Votre compte a √©t√© cr√©√© avec succ√®s. Connectez-vous !")
            return redirect("login")

        except Exception as e:
            messages.error(request, f"Une erreur s'est produite : {str(e)}")
            return render(request, "register.html", {"form_data": form_data, "errors": errors})

    return render(request, "register.html")


def generate_unique_username(first_name, last_name):
    """ 
    G√©n√®re un username sous la forme 'Prenom_Nom' en rempla√ßant tous les espaces par '_'
    et ajoute un suffixe (_1, _2, ...) en cas de doublon.
    """

    # Normaliser le pr√©nom et le nom en rempla√ßant les espaces par des underscores
    base_username = f"{first_name}_{last_name}"
    base_username = re.sub(r"\s+", "_", base_username)  # Remplace tous les espaces par "_"
    
    username = base_username
    count = 1

    while User.objects.filter(username=username).exists():
        username = f"{base_username}_{count}"
        count += 1

    return username

logging.basicConfig(level=logging.DEBUG, force=True)  # üî• Active les logs √† 100%

# Cr√©er un logger sp√©cifique pour my_login_view
logger = logging.getLogger('my_login_view')

def my_login_view(request):
    print("üöÄ Vue `my_login_view` appel√©e", flush=True)
    logger.debug("üöÄ Vue `my_login_view` appel√©e")

    if request.method == "POST":
        print("üì© Requ√™te POST re√ßue", flush=True)
        
        email = request.POST.get('email')
        password = request.POST.get('password')

        print(f"üìß Email re√ßu: {email}", flush=True)

        # üîç Trouver l'utilisateur correspondant √† l'email
        try:
            user = User.objects.get(email=email)  # Chercher l'utilisateur via l'email
            username = user.username
            print(f"‚úÖ Utilisateur trouv√©: {username}", flush=True)
        except User.DoesNotExist:
            print(f"‚ùå Aucun utilisateur trouv√© avec cet email: {email}", flush=True)
            return JsonResponse({'error': "E-mail introuvable"}, status=400)

        # üîê Authentifier avec le username et le password
        print(f"üîç Tentative d'authentification pour {username}...", flush=True)
        user_authenticated = authenticate(request, username=username, password=password)

        if user_authenticated is not None:
            print(f"‚úÖ Authentification r√©ussie pour {username}", flush=True)
            login(request, user_authenticated)  # üî• Connexion Django
            return JsonResponse({'redirect_url': '/'})  # üî• Redirige vers la page d'accueil d√©finie par `path('', views.home, name='home')`
        else:
            print("‚ùå Mot de passe incorrect ou probl√®me d'authentification", flush=True)
            return JsonResponse({'error': "E-mail ou mot de passe incorrect"}, status=400)

    print("üîô Retour √† la page de connexion", flush=True)
    return render(request, 'login.html')


def home(request):
    user_semesters = UserSemester.objects.filter(user=request.user)
    context = {
        'user_semesters': user_semesters
    }
    return render(request, 'pagedacceuil.html', context)


# Listes valides pour validation
VALID_SEMESTERS = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'S10']
VALID_MODULES = ['Anatomie_1', 'Biochimie_et_chimie', 'Biologie_et_Genetique', 'Biophysique',
                 'Sante_publique_et_Biostatistique', 'Methodo_et_termino', 
                 'Anatomie_II', 'Histologie-Embryologie', 'Sciences-Humaines', 
                 'Anatomie_Pathologique_generale', 
                 'Maladies_Infectieuses_and_Parasytologie_et_Mycologie', 'Radiologie', 
                 'Pathologie_cardiovasculaire', 'Pathologie_de_l_appareil_digestif', 
                 'Pathologie_respiratoire', 'Cancerologie_Hematologie', 
                 'Glandes_endocrines_peau', 'Maladie_du_Systeme_Nerveux']

logger = logging.getLogger(__name__)

def page_view(request, semester, template_name):
     # Ajoutez un message de log au niveau DEBUG

    if semester not in VALID_SEMESTERS or template_name not in VALID_MODULES:
        raise Http404("Page not found")  # Retourne une 404 si les param√®tres sont invalides
    try:
        return render(request, f'{semester}/{template_name}.html')  # Charge dynamiquement le template
    except:
        raise Http404("Page not found")


# G√©n√©rer VALID_PAGEMODULE dynamiquement
templates_dir = os.path.join('quizapp', 'templates')  # Adaptez selon votre structure
VALID_PAGEMODULE = get_valid_pagemodules(templates_dir)

def render_favorite(request, semester, favorite_name):

    # Construire le chemin complet pour le fichier Favori dans le dossier du semestre
    templates_dir = os.path.join('quizapp', 'templates', semester)
    file_path = os.path.join(templates_dir, f"{favorite_name}.html")

    if not os.path.exists(file_path):
        raise Http404(f"Le fichier {favorite_name}.html n'existe pas dans {semester}.")

    # Construire le chemin du template pour Django
    template_path = f'{semester}/{favorite_name}.html'

    try:
        return render(request, template_path)
    except Exception as e:
        print(f"Erreur lors du rendu : {e}")
        raise Http404("Le fichier demand√© est introuvable.")



    
from django.http import Http404
from django.shortcuts import render
from .models import UserSemester, Module

@login_required
def get_user_semesters(request):
    """
    Vue pour r√©cup√©rer les semestres accessibles √† l'utilisateur authentifi√©.
    Si aucun semestre n'est attribu√©, le serveur envoie un message sp√©cifique.
    """
    try:
        user_semester = UserSemester.objects.filter(user=request.user).first()

        if not user_semester:
            return JsonResponse({
                'accessible_semesters': [],
                'message': "Vous n'√™tes toujours pas abonn√© ! Qu'est-ce que vous attendez ?!"
            }, status=200)  # ‚úÖ Liste vide + message avec HTTP 200

        semesters = user_semester.semesters.all()
        semester_names = [semester.name for semester in semesters]

        return JsonResponse({
            'accessible_semesters': semester_names,
            'message': None  # Aucune alerte si l'utilisateur a des semestres
        }, status=200)

    except Exception as e:
        return JsonResponse({'error': 'Une erreur est survenue lors de la r√©cup√©ration des semestres.'}, status=500)

    
@login_required
def get_accessible_modules(request):
    """
    Vue pour r√©cup√©rer les modules accessibles avec leurs descriptions.
    """
    try:
        # R√©cup√©rer les semestres de l'utilisateur
        user_semesters = UserSemester.objects.filter(user=request.user)

        # Si aucun semestre n'est attribu√©, retourner une liste vide
        if not user_semesters.exists():
            return JsonResponse({'accessible_modules': []}, status=200)  # ‚úÖ Renvoie une liste vide au lieu d'une erreur

        modules_by_semester = []

        for user_semester in user_semesters:
            for semester in user_semester.semesters.all():
                # R√©cup√©rer les modules et descriptions
                modules = Module.objects.filter(semester=semester)
                semester_data = {
                    'semester_name': semester.name,
                    'semester_description': semester.description,
                    'modules': [
                        {
                            'module_name': module.name,
                            'description': module.description
                        } for module in modules
                    ]
                }
                modules_by_semester.append(semester_data)

        return JsonResponse({'accessible_modules': modules_by_semester}, status=200)

    except Exception as e:
        return JsonResponse({'error': 'Une erreur est survenue lors de la r√©cup√©ration des modules.'}, status=500)

    
@login_required
def update_account(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)

            user = request.user
            profile = Profile.objects.get(user=user)

            username = data.get('username')
            dob = data.get('dob')
            password = data.get('password')

            # V√©rifier si l'utilisateur a chang√© son mot de passe il y a moins de 2 semaines
            if password:
                if profile.last_password_change and (now() - profile.last_password_change) < timedelta(weeks=2):
                    next_change_date = profile.last_password_change + timedelta(weeks=2)
                    return JsonResponse({
                        'error': 'Vous ne pouvez changer votre mot de passe qu‚Äôune fois toutes les 2 semaines.',
                        'next_change_allowed': next_change_date.strftime('%d/%m/%Y %H:%M')
                    }, status=400)

                # Mettre √† jour le mot de passe
                user.password = make_password(password)
                profile.encrypted_password = cipher_suite.encrypt(password.encode()).decode()
                profile.last_password_change = now()  # Mettre √† jour la date du dernier changement

            if username:
                user.username = username
            if dob:
                profile.birth_date = dob

            user.save()
            profile.save()

            return JsonResponse({'success': True, 'message': 'Compte mis √† jour avec succ√®s.'})

        except Exception as e:
            return JsonResponse({'error': f'Erreur : {str(e)}'}, status=400)

    return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)

def dynamic_view(request, semester, module=None, file_name=None):
    user_semesters = UserSemester.objects.filter(user=request.user)

    # Semestres et modules autoris√©s
    authorized_semesters = {s.name for us in user_semesters for s in us.semesters.all()}
    authorized_modules = {m.name for us in user_semesters for m in us.modules.all()}

    # Ajout de prints pour debug
    print("Utilisateur connect√© :", request.user.username)
    print("Semestre demand√© :", semester)
    print("Modules autoris√©s :", authorized_modules)
    print("Semestres autoris√©s avant modification :", authorized_semesters)

    # Remplacer S1 par SEMESTRE 1 pour les comparaisons
    formatted_semester = semester.upper().replace("S", "SEMESTRE ")
    authorized_semesters = {s.lower() for s in authorized_semesters}

    print("Semestre demand√© apr√®s formatage :", formatted_semester)
    print("Semestres autoris√©s apr√®s modification :", authorized_semesters)

    # V√©rification des permissions pour le semestre
    if formatted_semester.lower() not in authorized_semesters:
        print("Erreur : Semestre non autoris√©.")
        raise Http404("Semestre non autoris√©.")

    # V√©rification des permissions pour le module
    if module and module not in authorized_modules:
        print("Erreur : Module non autoris√©.")
        raise Http404("Module non autoris√©.")

    # Initialisation de la variable pour tous les cas
    semesters_with_modules = {}

    # Si pas de module ni de fichier, afficher les modules disponibles
    if not module and not file_name:
        for us in user_semesters:
            for s in us.semesters.all():
                # Filtrer les modules autoris√©s pour ce semestre
                authorized_modules_for_semester = us.modules.filter(semesters=s, name__in=authorized_modules)
                semesters_with_modules[s.name] = authorized_modules_for_semester

        print("Modules disponibles par semestre (autoris√©s uniquement) :", semesters_with_modules)
        return render(request, 'modules_available.html', {'semesters_with_modules': semesters_with_modules})

    # Transformer SEMESTRE X en S1 pour trouver les fichiers
    file_path_semester = formatted_semester.replace("SEMESTRE ", "S")

    # Gestion des fichiers et modules
    template_path = None
    if file_name and module:
        template_path = f'{file_path_semester}/{module}/{file_name}.html'
    elif module:
        template_path = f'{file_path_semester}/{module}.html'
    else:
        print("Erreur : Module ou fichier non sp√©cifi√©.")
        raise Http404("Module ou fichier non sp√©cifi√©.")

    # Rendu du template
    try:
        print("Chemin du template √† rendre :", template_path)
        return render(request, template_path, {'semesters_with_modules': semesters_with_modules})
    except Exception as e:
        print(f"Erreur de rendu : {e}")
        raise Http404("Le fichier demand√© est introuvable.")





def load_correct_answers(exam_name):
    # Utiliser STATICFILES_DIRS pour acc√©der au r√©pertoire statique pendant le d√©veloppement
    static_dir = os.path.join(settings.BASE_DIR, 'quizapp', 'static', 'data')
    json_path = os.path.join(static_dir, f'{exam_name}_correct_answers.json')

    # V√©rifiez si le fichier existe
    if not os.path.exists(json_path):
        raise FileNotFoundError(f"Fichier JSON introuvable : {json_path}")

    print(f"Chargement du fichier JSON : {json_path}")
    with open(json_path, 'r', encoding='utf-8') as f:
        return json.load(f)



@login_required
def module_details(request, semester, module_description):
    try:

        # Recherche du module par sa description
        module_instance = Module.objects.get(description=module_description, semester__name=semester)
        exams = Exam.objects.filter(module=module_instance).values('name', 'score')
        exams_list = list(exams)

        return JsonResponse({'exams': exams_list}, status=200)
    except Module.DoesNotExist:
        return JsonResponse({'error': f"Module '{module_description}' introuvable pour le semestre '{semester}'."}, status=404)
    except Exception as e:
        return JsonResponse({'error': f"Erreur interne : {str(e)}"}, status=500)
    
@csrf_exempt
def soumettre_quiz(request):
    if request.method == 'POST':
        try:
            print("Requ√™te POST re√ßue.")
            data = json.loads(request.body)
            print(f"Donn√©es re√ßues : {data}")

            # R√©cup√©rer le nom de l'examen
            exam_name = data.get('exam_name')
            if not exam_name:
                print("Erreur : Nom de l'examen manquant dans la requ√™te.")
                return JsonResponse({'status': 'error', 'message': "Nom de l'examen manquant."}, status=400)
            print(f"Nom de l'examen : {exam_name}")

            # Charger les r√©ponses correctes depuis le fichier JSON
            try:
                correct_answers = load_correct_answers(exam_name)
                print(f"R√©ponses correctes charg√©es pour l'examen : {exam_name}")
            except FileNotFoundError as e:
                print(f"Erreur : Fichier JSON des r√©ponses correctes introuvable pour l'examen {exam_name} - {e}")
                return JsonResponse({'status': 'error', 'message': str(e)}, status=404)

            # R√©cup√©rer les r√©ponses utilisateur
            user_answers = data.get('userAnswers', {})
            print(f"R√©ponses utilisateur : {user_answers}")

            total_questions = len(correct_answers)
            print(f"Nombre total de questions dans l'examen : {total_questions}")

            total_questions_answered = 0
            correct_count = 0

            # Comparer les r√©ponses utilisateur avec les r√©ponses correctes
            for question_id, correct_answer in correct_answers.items():
                print(f"Question ID : {question_id}, R√©ponse correcte : {correct_answer}")
                user_answer = user_answers.get(question_id, {}).get("selected", [])
                print(f"R√©ponse utilisateur pour la question {question_id} : {user_answer}")

                if user_answer:
                    total_questions_answered += 1
                    if set(user_answer) == set(correct_answer):
                        correct_count += 1
                        print(f"R√©ponse correcte pour la question {question_id}.")
                    else:
                        print(f"R√©ponse incorrecte pour la question {question_id}.")
                else:
                    print(f"Aucune r√©ponse donn√©e pour la question {question_id}.")

            print(f"Nombre total de questions r√©pondues : {total_questions_answered}")
            print(f"Nombre total de r√©ponses correctes : {correct_count}")

            # Calculer le score
            score = (correct_count / total_questions) * 20 if total_questions_answered > 0 else 0
            print(f"Score calcul√© : {score}")

            # Enregistrer le r√©sultat
            user = request.user
            print(f"Utilisateur : {user.username}")

            try:
                exam = Exam.objects.get(name=exam_name)
                print(f"Examen trouv√© dans la base : {exam.name}")
            except Exam.DoesNotExist:
                print(f"Erreur : L'examen {exam_name} n'existe pas dans la base.")
                return JsonResponse({'status': 'error', 'message': f"L'examen {exam_name} n'existe pas."}, status=404)

            ExamResult.objects.create(user=user, exam=exam, score=score)
            print(f"R√©sultat enregistr√© pour l'utilisateur {user.username} et l'examen {exam_name}.")

            return JsonResponse({'status': 'success', 'score': score, 'message': 'Score enregistr√© avec succ√®s.'})

        except Exception as e:
            print(f"Erreur serveur inattendue : {e}")
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

    print("M√©thode non autoris√©e. Seules les requ√™tes POST sont accept√©es.")
    return JsonResponse({'status': 'error', 'message': 'M√©thode non autoris√©e.'}, status=405)





@login_required
def resultats(request):
    user = request.user

    # R√©cup√©rer les r√©sultats d'examens de l'utilisateur
    exam_results = ExamResult.objects.filter(user=user).order_by("exam__name", "attempt_date")

    # R√©cup√©rer les semestres accessibles pour l'utilisateur
    user_semesters = UserSemester.objects.filter(user=user)
    if not user_semesters.exists():
        return render(request, 'resultats.html', {'error': 'Aucun semestre accessible'})

    semester_data = []
    for user_semester in user_semesters:
        for semester in user_semester.semesters.all():
            modules = Module.objects.filter(semester=semester)
            modules_data = []
            for module in modules:
                # Filtrer les examens avec au moins une tentative
                exams = Exam.objects.filter(module=module, examresult__user=user).distinct()

                # Construction des donn√©es des examens
                exams_data = [
                    {
                        'exam_name': exam.source,  # Utiliser la source de l'examen
                        'score': ExamResult.objects.filter(exam=exam, user=user).latest('attempt_date').score,
                        'date': ExamResult.objects.filter(exam=exam, user=user).latest('attempt_date').attempt_date.strftime('%Y-%m-%d'),
                    }
                    for exam in exams
                ]

                modules_data.append({
                    'module_name': module.description,
                    'exams': exams_data
                })
            semester_data.append({
                'semester_name': semester.name,
                'modules': modules_data
            })

    # Organiser les r√©sultats par source d'examen
    results_by_exam = {}
    for result in exam_results:
        exam_source = result.exam.source
        if exam_source not in results_by_exam:
            results_by_exam[exam_source] = []
        results_by_exam[exam_source].append(result)

    return render(request, "resultats.html", {
        "user": user,
        "results_by_exam": results_by_exam,
        "semester_data": semester_data,
    })

@login_required
def get_exam_chart_data(request, source):
    try:
        # Log pour la source demand√©e
        print(f"Requ√™te re√ßue pour r√©cup√©rer les donn√©es pour l'examen : {source}")

        # Rechercher l'examen correspondant
        exam = Exam.objects.get(source=source)
        print(f"Examen trouv√© : {exam}")

        # R√©cup√©rer les r√©sultats li√©s √† cet examen et √† l'utilisateur
        results = ExamResult.objects.filter(exam=exam, user=request.user).order_by('attempt_date')
        print(f"R√©sultats trouv√©s : {results}")

        # Construire les donn√©es pour le graphique
        data = {
            'labels': [result.attempt_date.strftime('%Y-%m-%d') for result in results],
            'scores': [result.score for result in results],
        }

        return JsonResponse(data)

    except Exam.DoesNotExist:
        print(f"Examen introuvable pour la source : {source}")
        return JsonResponse({'error': 'Examen introuvable'}, status=404)
    except Exception as e:
        print(f"Erreur lors du traitement de la requ√™te : {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)
    
@login_required
def get_semester_average_data(request, semester_name):
    try:
        # Trouver le semestre
        semester = get_object_or_404(Semester, name=semester_name)
        modules = Module.objects.filter(semester=semester)

        module_averages = []
        total_score = 0
        total_modules = 0

        for module in modules:
            # Calculer la moyenne des examens pour chaque module
            exams = Exam.objects.filter(module=module)
            scores = [
                ExamResult.objects.filter(exam=exam, user=request.user).latest('attempt_date').score
                for exam in exams if ExamResult.objects.filter(exam=exam, user=request.user).exists()
            ]

            if scores:
                module_average = sum(scores) / len(scores)
                module_averages.append({'module_name': module.description, 'average': round(module_average, 2)})
                total_score += module_average
                total_modules += 1
            else:
                # Aucun examen tent√© pour ce module
                module_averages.append({'module_name': module.description, 'average': 0})

        # Calculer la moyenne globale du semestre
        semester_average = round(total_score / total_modules, 2) if total_modules > 0 else 0

        return JsonResponse({
            'module_averages': module_averages,
            'semester_average': semester_average
        })

    except Semester.DoesNotExist:
        return JsonResponse({'error': f"Semestre '{semester_name}' introuvable."}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)
    
@csrf_exempt
def track_attempts(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            full_choice_ids = data.get('full_choice_ids', [])
            question_name = data.get('question_name', "")

            # Extraire l'ID de la question √† partir d'un choix (on enl√®ve la partie lettre)
            question_id = '_'.join(full_choice_ids[0].split('_')[:-1])

            # R√©cup√©rer la question correspondante
            question = Question.objects.get(id=question_id)
            print(f"ID de la question extrait : {question_id}")


            # R√©cup√©rer les choix corrects associ√©s √† la question
            correct_choices = list(Choice.objects.filter(question=question, is_correct=True).values_list('id', flat=True))
            print(f"Choix corrects pour la question {question_id} : {correct_choices}")

            # Comparer les choix de l'utilisateur aux choix corrects
            is_correct = set(full_choice_ids) == set(correct_choices)
            print(f"R√©sultat de la comparaison : {is_correct}")

            # Enregistrer la tentative
            QuestionAttempt.objects.create(
                user=request.user,
                question=question,
                is_correct=is_correct
            )

            # Garder uniquement les 30 derni√®res tentatives pour cette question et cet utilisateur
            attempts = QuestionAttempt.objects.filter(user=request.user, question=question).order_by('-id')
            if attempts.count() > 30:
                # Supprimer les plus anciennes tentatives
                to_delete_ids = [attempt.id for attempt in attempts[30:]]
                QuestionAttempt.objects.filter(id__in=to_delete_ids).delete()

 # Calcul des statistiques
            total_attempts = attempts.count()
            failures = attempts.filter(is_correct=False).count()
            failure_rate = failures / total_attempts if total_attempts > 0 else 0
            consecutive_failures = 0

            # Parcourir les tentatives r√©centes pour calculer les √©checs cons√©cutifs
            for attempt in attempts:
                if attempt.is_correct:
                    break
                consecutive_failures += 1

            # Calcul du taux de succ√®s
            failures = attempts.filter(is_correct=False).count()
            success_rate = (total_attempts - failures) / total_attempts if total_attempts > 0 else 0

            # Gestion des alertes
            alert = None
            if consecutive_failures >= 3:
                alert = {
                    'type': 'consecutive_failures',
                    'message': f"‚ö†Ô∏è Vous avez √©chou√© {consecutive_failures} fois de suite √† cette question. Revoir le cours est conseill√©.",
                    'color': '#ffcccb'
                }


            # Si l'utilisateur r√©ussit, r√©initialiser les √©checs cons√©cutifs
            if is_correct:
                consecutive_failures = 0
                alert = None

            return JsonResponse({
                'is_correct': is_correct,
                'total_attempts': total_attempts,
                'failures': failures,
                'failure_rate': failure_rate,
                'alert': alert
            })

        except Question.DoesNotExist:
            print(f"Erreur : La question '{question_id}' n'existe pas.")
            return JsonResponse({'error': f"La question '{question_id}' n'existe pas."}, status=404)
        except Exception as e:
            print(f"Erreur inattendue : {str(e)}")

    return JsonResponse({'error': 'Pas de donnees.'}, status=405)

def questions_for_exam(request, exam_id):
    questions = Question.objects.filter(exam_id=exam_id).values('id', 'text')
    alerts = []

    for question in questions:
        # R√©cup√©rer les derni√®res tentatives pour chaque question
        attempts = QuestionAttempt.objects.filter(
            user=request.user, question_id=question['id']
        ).order_by('-timestamp')[:30]

        consecutive_failures = 0
        for attempt in attempts:
            if not attempt.is_correct:
                consecutive_failures += 1
            else:
                break

        if consecutive_failures >= 3:
            alerts.append({
                'question_id': question['id'],
                'message': f"‚ö†Ô∏è Vous avez √©chou√© {consecutive_failures} fois de suite √† cette question. Revoir le cours est conseill√©.",
                'color': '#ffcccb'
            })

    return JsonResponse({
        'questions': list(questions),
        'alerts': alerts,
    })

logging.basicConfig(level=logging.DEBUG)

@login_required
def start_challenge(request):
    if request.method == "POST":

        # R√©cup√©rer les mati√®res s√©lectionn√©es
        selected_subjects = request.POST.getlist('subjects')

        if not selected_subjects:
            return HttpResponse("Erreur : Vous devez s√©lectionner une mati√®re.", status=400)

        # R√©cup√©rer le nombre de questions
        try:
            num_questions = int(request.POST.get('num_questions', 0))
            if num_questions < 1 or num_questions > 10:
                return HttpResponse("Erreur : Le nombre de questions doit √™tre compris entre 1 et 10.", status=400)
        except ValueError:
            return HttpResponse("Erreur : Le nombre de questions est invalide.", status=400)

        # R√©cup√©rer le mode
        selected_mode = request.POST.get('mode', 'sans_faute')

        # Enregistrer les donn√©es dans la session
        request.session['selected_subjects'] = selected_subjects
        request.session['num_questions'] = num_questions
        request.session['mode'] = selected_mode

        # Redirection en fonction du mode
        if selected_mode == 'rapidite':
            return redirect('time_challenge')  # Vue pour le mode Rapidit√©
        elif selected_mode == 'sans_faute':
            return redirect('challenge')  # Vue pour le mode Sans Faute

        # Si le mode est invalide
        return HttpResponse("Erreur : Mode s√©lectionn√© invalide.", status=400)

    # Si la m√©thode est GET, afficher le formulaire

    # R√©cup√©rer les semestres auxquels l'utilisateur a acc√®s
    user_semesters = UserSemester.objects.filter(user=request.user).first()
    if not user_semesters:
        return render(request, 'start_challenge.html', {'subjects': []})

    # R√©cup√©rer les mati√®res des semestres autoris√©s
    allowed_semesters = user_semesters.semesters.all()
    subjects = Subject.objects.filter(semester__in=allowed_semesters)


    return render(request, 'start_challenge.html', {'subjects': subjects})


def challenge(request):
    if request.method == "GET":

        # R√©cup√©rer les mati√®res s√©lectionn√©es dans la session
        selected_subjects = request.session.get('selected_subjects', [])
        num_questions_per_subject = request.session.get('num_questions', 10)

        print(f"Mati√®res s√©lectionn√©es : {selected_subjects}")
        print(f"Nombre de questions par mati√®re : {num_questions_per_subject}")

        if not selected_subjects or num_questions_per_subject < 1:
            return render(request, 'challenge.html', {
                'error': "Aucune mati√®re ou nombre de questions valide trouv√©. Veuillez recommencer."
            })

        try:
            # R√©cup√©rer les mati√®res s√©lectionn√©es depuis la base de donn√©es
            subjects = Subject.objects.filter(id__in=selected_subjects)
            print(f"Mati√®res s√©lectionn√©es (codes) : {[subject.code for subject in subjects]}")

            # Pr√©parer les questions pour chaque mati√®re
            questions = []
            for subject in subjects:
                print(f"Traitement de la mati√®re : {subject.code}")

                if subject.code == "AD":  # Maladies digestives : exclure les questions dont l'ID commence par ADC
                    print("Mati√®re d√©tect√©e : Maladies digestives")
                    subject_questions = Question.objects.filter(
                        id__startswith=subject.code
                    ).exclude(id__startswith="ADC").order_by('?')[:num_questions_per_subject]

                elif subject.code == "CL":  # Cardiologie : exclure les questions dont l'ID commence par CLC
                    print("Mati√®re d√©tect√©e : Cardiologie")
                    subject_questions = Question.objects.filter(
                        id__startswith=subject.code
                    ).exclude(id__startswith="CLC").order_by('?')[:num_questions_per_subject]

                else:  # Mati√®res standards
                    print(f"Mati√®re standard d√©tect√©e : {subject.code}")
                    subject_questions = Question.objects.filter(
                        id__startswith=subject.code
                    ).order_by('?')[:num_questions_per_subject]

                # Logs pour le d√©bogage des questions
                print(f"Questions trouv√©es pour {subject.code} avant exclusion : {Question.objects.filter(id__startswith=subject.code).count()}")
                print(f"Questions trouv√©es pour {subject.code} apr√®s exclusion : {subject_questions.count()}")

                if not subject_questions.exists():
                    print(f"Aucune question trouv√©e pour la mati√®re {subject.code} avec les filtres.")
                    continue

                questions.extend(subject_questions)

            print(f"Total de questions g√©n√©r√©es : {len(questions)}")
            if not questions:
                return render(request, 'challenge.html', {
                    'error': "Aucune question disponible pour les mati√®res s√©lectionn√©es."
                })

            # Pr√©parer les donn√©es des questions pour le frontend
            questions_data = []
            for question in questions:
                choices = question.choices.all()
                correct_choices = question.choices.filter(is_correct=True).values_list('id', flat=True)

                # Log pour afficher les propositions correctes

                # D√©terminer la source en utilisant la colonne `source` de l'examen
                source = question.exam.source if question.exam and question.exam.source else "Source inconnue"

                questions_data.append({
                    'id': question.id,
                    'text': question.text,
                    'choices': [{'id': choice.id, 'text': choice.text} for choice in choices],
                    'correct_choices': list(correct_choices),
                    'source': source,  # Utilisation de la source de l'examen
                })

            # D√©terminer la premi√®re question pour l'affichage
            first_question = questions_data[0]

            return render(request, 'challenge.html', {
                'first_question': first_question,
                'questions': questions_data,
            })

        except Exception as e:
            return render(request, 'challenge.html', {
                'error': "Une erreur s'est produite lors de la g√©n√©ration des questions."
            })

    return JsonResponse({"error": "M√©thode non autoris√©e."}, status=405)



def time_challenge(request):
    if request.method == "GET":

        # R√©cup√©rer les donn√©es de la session
        selected_subjects = request.session.get('selected_subjects', [])
        num_questions_per_subject = request.session.get('num_questions', 10)

        print(f"Mati√®res s√©lectionn√©es : {selected_subjects}")
        print(f"Nombre de questions par mati√®re : {num_questions_per_subject}")

        if not selected_subjects or num_questions_per_subject < 1:
            return render(request, 'time_challenge.html', {
                'error': "Aucune mati√®re ou nombre de questions valide trouv√©. Veuillez recommencer."
            })

        try:
            # R√©cup√©rer les mati√®res s√©lectionn√©es depuis la base de donn√©es
            subjects = Subject.objects.filter(id__in=selected_subjects)
            print(f"Mati√®res s√©lectionn√©es (codes) : {[subject.code for subject in subjects]}")
            questions = []

            # Charger les questions pour chaque mati√®re
            for subject in subjects:
                print(f"Traitement de la mati√®re : {subject.code}")

                if subject.code == "AD":  # Maladies digestives : exclure les questions dont l'ID commence par ADC
                    print("Mati√®re d√©tect√©e : Maladies digestives")
                    subject_questions = Question.objects.filter(
                        id__startswith=subject.code
                    ).exclude(id__startswith="ADC").order_by('?')[:num_questions_per_subject]

                elif subject.code == "CL":  # Cardiologie : exclure les questions dont l'ID commence par CLC
                    print("Mati√®re d√©tect√©e : Cardiologie")
                    subject_questions = Question.objects.filter(
                        id__startswith=subject.code
                    ).exclude(id__startswith="CLC").order_by('?')[:num_questions_per_subject]

                else:  # Mati√®res standards
                    print(f"Mati√®re standard d√©tect√©e : {subject.code}")
                    subject_questions = Question.objects.filter(
                        id__startswith=subject.code
                    ).order_by('?')[:num_questions_per_subject]

                # Logs pour d√©boguer
                print(f"Questions trouv√©es pour {subject.code} avant exclusion : {Question.objects.filter(id__startswith=subject.code).count()}")
                print(f"Questions trouv√©es pour {subject.code} apr√®s exclusion : {subject_questions.count()}")

                if not subject_questions.exists():
                    print(f"Aucune question trouv√©e pour la mati√®re {subject.code} avec les filtres.")
                    continue

                questions.extend(subject_questions)

            if not questions:
                return render(request, 'time_challenge.html', {
                    'error': "Aucune question trouv√©e pour les mati√®res s√©lectionn√©es."
                })

            # Pr√©parer les donn√©es des questions pour le frontend
            questions_data = []
            for question in questions:
                choices = question.choices.all()
                correct_choices = question.choices.filter(is_correct=True).values_list('id', flat=True)

                # D√©terminer la source en utilisant la colonne `source` de l'examen
                source = question.exam.source if question.exam and question.exam.source else "Source inconnue"

                questions_data.append({
                    'id': question.id,
                    'text': question.text,
                    'choices': [{'id': choice.id, 'text': choice.text} for choice in choices],
                    'correct_choices': list(correct_choices),
                    'source': source,  # Utilisation de la source de l'examen
                })

            return render(request, 'time_challenge.html', {
                'questions': questions_data,
            })

        except Exception as e:
            return render(request, 'time_challenge.html', {
                'error': "Une erreur s'est produite lors de la g√©n√©ration des questions."
            })

    return JsonResponse({"error": "M√©thode non autoris√©e."}, status=405)


@login_required
def check_comment(request, question_id):
    user = request.user
    exists = Comment.objects.filter(question_id=question_id, user=user).exists()
    return JsonResponse({'exists': exists})



@csrf_exempt
def get_comments(request, question_id):
    """Retrieve comments for a specific question."""
    if request.method == 'GET':
        try:
            # V√©rifiez d'abord dans le mod√®le `Question`
            question = Question.objects.filter(id=question_id).first()

            # Si non trouv√©, v√©rifiez dans `UncorrectedQuestion`
            if not question:
                question = UncorrectedQuestion.objects.filter(id=question_id).first()

            # Si toujours non trouv√©, lever une erreur 404
            if not question:
                return JsonResponse({'error': f'Question with ID {question_id} not found.'}, status=404)

            # R√©cup√©rer les commentaires associ√©s
            comments = question.comments.all() if hasattr(question, 'comments') else []

            # Ajouter un champ `is_owner` pour chaque commentaire
            comments_data = [
                {
                    'id': comment.id,
                    'content': comment.content,
                    'timestamp': comment.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    'is_owner': comment.user == request.user  # V√©rifie si l'utilisateur connect√© est le propri√©taire
                }
                for comment in comments
            ]

            return JsonResponse({'comments': comments_data})

        except Exception as e:
            return JsonResponse({'error': 'Unable to fetch comments.'}, status=500)

    return JsonResponse({'error': 'M√©thode non autoris√©e.'}, status=405)


from django.utils.timezone import localtime

@csrf_exempt
def add_comment(request):
    """Add a comment to a question."""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            raw_question_id = data.get('question_id')
            content = data.get('content')
            user = request.user  # Current user

            # Extraire uniquement le num√©ro apr√®s "question-"
            if raw_question_id.startswith('question-'):
                question_id = raw_question_id.split('-')[1]  # R√©cup√®re le num√©ro
            else:
                question_id = raw_question_id

            # R√©cup√©rer la question associ√©e
            question = get_object_or_404(Question, id=question_id)

            # V√©rifier si l'utilisateur a d√©j√† comment√© cette question
            if Comment.objects.filter(question=question, user=user).exists():
                return JsonResponse({'error': 'Vous avez d√©j√† comment√© cette question.'}, status=400)

            # Cr√©er un nouveau commentaire
            comment = Comment.objects.create(
                question=question,
                user=user,
                content=content,
            )

            return JsonResponse({
                'message': 'Commentaire ajout√© avec succ√®s.',
                'comment': {
                    'id': comment.id,
                    'unique_id': comment.unique_id,
                    'user': user.username,
                    'content': comment.content,
                    'timestamp': comment.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                },
            })
        except Exception as e:
            return JsonResponse({'error': 'Impossible d‚Äôajouter le commentaire.'}, status=500)
    return JsonResponse({'error': 'M√©thode non autoris√©e.'}, status=405)



@csrf_exempt
def delete_comment(request, comment_id):
    """Delete a specific comment."""
    if request.method == 'DELETE':
        try:
            comment = get_object_or_404(Comment, id=comment_id)

            # Check if the user owns the comment
            if comment.user != request.user:
                return JsonResponse({'error': 'Vous ne pouvez pas supprimer ce commentaire.'}, status=403)

            comment.delete()
            return JsonResponse({'message': 'Commentaire supprim√© avec succ√®s.'})
        except Exception as e:
            return JsonResponse({'error': 'Unable to delete comment.'}, status=500)
    return JsonResponse({'error': 'M√©thode non autoris√©e.'}, status=405)

@csrf_exempt
def contact_page(request):
    if request.method == 'POST':
        try:

            # R√©cup√©ration des donn√©es envoy√©es via AJAX (requ√™te JSON)
            data = json.loads(request.body)

            message_content = data.get('message', '')
            mode = data.get('mode', 'anonymous')

            # Validation du message
            if not message_content.strip():
                return JsonResponse({'status': 'error', 'message': 'Le message est vide.'}, status=400)


            # V√©rification des doublons : Un m√™me message envoy√© dans les 5 derni√®res secondes
            recent_duplicate = Message.objects.filter(
                content=message_content,
                username=request.user if request.user.is_authenticated else None,
                created_at__gte=now() - timedelta(seconds=5)
            ).exists()

            if recent_duplicate:
                return JsonResponse({'status': 'error', 'message': 'Message d√©j√† envoy√© r√©cemment.'}, status=400)

            # Cr√©ation et sauvegarde du message
            message = Message(content=message_content)
            if mode == 'username' and request.user.is_authenticated:
                message.is_anonymous = False
                message.username = request.user

            message.save()

            # Log pour confirmer l'enregistrement en base de donn√©es

            # Envoi de l'email √† l'administrateur
            try:
                send_mail(
                    'Nouveau message soumis',
                    f'Contenu: {message_content}\nMode: {"Anonyme" if message.is_anonymous else request.user.username}',
                    'nasser.sentissi2@gmail.com',
                    ['nasser.sentissi2@gmail.com'],
                    fail_silently=False,
                )
            except Exception as email_error:
                logger.error(f"Erreur lors de l'envoi de l'email : {str(email_error)}")

            # R√©ponse JSON en cas de succ√®s
            return JsonResponse({'status': 'success'})

        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': 'Les donn√©es envoy√©es ne sont pas valides.'}, status=400)

        except Exception as e:
            # Log des erreurs en cas de probl√®me
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

    # GET Request : R√©cup√©ration du nom d'utilisateur si connect√©
    username = request.user.username if request.user.is_authenticated else None
    return render(request, 'contact.html', {'username': username})

    
@csrf_exempt
def get_attempts(request):
    """
    Vue pour r√©cup√©rer les statistiques des tentatives des questions envoy√©es.
    """
    if request.method == 'POST':  # On s'attend √† une requ√™te POST contenant les IDs des questions
        try:
            # Charger les donn√©es JSON envoy√©es par JavaScript
            data = json.loads(request.body)
            question_ids = data.get('question_ids', [])  # R√©cup√©rer les IDs des questions

            # V√©rifier si des IDs ont √©t√© re√ßus
            if not question_ids:
                return JsonResponse({'error': 'Aucun ID de question re√ßu.'}, status=400)


            # Initialiser un dictionnaire pour stocker les statistiques
            stats = {}

            # Parcourir chaque question ID pour calculer les statistiques
            for question_id in question_ids:
                try:
                    # R√©cup√©rer la question correspondante
                    question = Question.objects.get(id=question_id)

                    # R√©cup√©rer les tentatives associ√©es √† l'utilisateur et √† la question
                    attempts = QuestionAttempt.objects.filter(user=request.user, question=question)
                    total_attempts = attempts.count()
                    failures = attempts.filter(is_correct=False).count()
                    failure_rate = (failures / total_attempts) * 100 if total_attempts > 0 else 0

                    # Ajouter les statistiques dans le dictionnaire
                    stats[question_id] = {
                        'total_attempts': total_attempts,
                        'failures': failures,
                        'failure_rate': round(failure_rate, 2)
                    }


                except Question.DoesNotExist:
                    # Si une question n'existe pas, on log l'erreur mais on continue
                    stats[question_id] = {'error': 'Question non trouv√©e'}

            # Retourner les statistiques en JSON
            return JsonResponse(stats)

        except json.JSONDecodeError:
            return JsonResponse({'error': 'Donn√©es JSON invalides.'}, status=400)
        except Exception as e:
            return JsonResponse({'error': 'Erreur serveur.'}, status=500)

    # Si la m√©thode n'est pas POST, retourner une erreur
    return JsonResponse({'error': 'M√©thode non autoris√©e.'}, status=405)

@login_required
def your_sidebar_view(request):
    """
    Vue pour afficher les semestres et modules accessibles dans la barre lat√©rale.
    """
    try:
        
        # R√©cup√©rer les semestres associ√©s √† l'utilisateur
        user_semesters = UserSemester.objects.filter(user=request.user)

        if not user_semesters:
            return render(request, 'pagedacceuil.html', {'data': {}})

        semesters_with_modules = {}
        for us in user_semesters:
            for semester in us.semesters.all():
                
                # R√©cup√©rer les modules associ√©s √† ce semestre
                modules = us.modules.filter(semesters=semester)
                
                # Ajouter les modules avec descriptions dans le dictionnaire
                semesters_with_modules[semester.name] = modules.values('description')



        # Renvoyer les donn√©es vers le template
        return render(request, 'pagedacceuil.html', {'data': semesters_with_modules})

    except Exception as e:
        return render(request, 'pagedacceuil.html', {'data': {}, 'error': str(e)})

@login_required
def submit_response(request):
    if request.method == "POST":
        # Extraction des donn√©es de la requ√™te POST
        data = request.POST
        question_id = data.get("question_id")
        selected_choices = data.getlist("choices[]")

        # Debugging
        print(f"R√©ponse soumise : question_id={question_id}, selected_choices={selected_choices}")

        # V√©rification des donn√©es re√ßues
        if not question_id or not selected_choices:
            print("Donn√©es invalides : question_id ou selected_choices manquants.")
            return JsonResponse({"error": "Donn√©es invalides"}, status=400)

        try:
            # R√©cup√©rer la question correspondante
            question = UncorrectedQuestion.objects.get(id=question_id)
            print(f"Question trouv√©e : {question.id}")
        except UncorrectedQuestion.DoesNotExist:
            print(f"Question introuvable : {question_id}")
            return JsonResponse({"error": "Question introuvable"}, status=404)

        # Supprimer les anciennes r√©ponses de l'utilisateur pour cette question
        UserResponse.objects.filter(user=request.user, question=question).delete()
        print(f"Anciennes r√©ponses supprim√©es pour l'utilisateur {request.user.username} sur la question {question_id}")

        # Ajouter les nouvelles r√©ponses
        for choice_id in selected_choices:
            try:
                # R√©cup√©rer le choix correspondant
                choice = UncorrectedChoice.objects.get(id=choice_id, question=question)
                # Cr√©er une nouvelle r√©ponse
                UserResponse.objects.create(user=request.user, choice=choice, question=question)
                print(f"Nouvelle r√©ponse ajout√©e : {choice.text} (ID : {choice.id})")
            except UncorrectedChoice.DoesNotExist:
                print(f"Choix introuvable : {choice_id}")
                continue

        print("Toutes les r√©ponses ont √©t√© enregistr√©es avec succ√®s.")
        return JsonResponse({"message": "R√©ponses enregistr√©es avec succ√®s."})

    # Si la requ√™te n'est pas POST
    print("Requ√™te invalide : m√©thode HTTP non support√©e.")
    return JsonResponse({"error": "Requ√™te invalide"}, status=400)


@csrf_exempt
def calculate_percentages(request, question_id):
    print(f"[DEBUG] D√©but du calcul des pourcentages pour la question : {question_id}")

    # √âtape 1 : R√©cup√©rer la question
    question = get_object_or_404(UncorrectedQuestion, id=question_id)
    print(f"[DEBUG] Question trouv√©e : {question.id} - {question.text}")

    # √âtape 2 : R√©cup√©rer les choix li√©s √† la question
    choices = UncorrectedChoice.objects.filter(question=question)
    print(f"[DEBUG] Nombre de choix disponibles pour la question : {choices.count()}")
    for choice in choices:
        print(f"[DEBUG] Choix : {choice.id} - Texte : {choice.text}")

    # √âtape 3 : R√©cup√©rer les derni√®res r√©ponses soumises par utilisateur
    latest_responses = (
        UserResponse.objects.filter(question=question)
        .order_by('user', '-timestamp')  # Trier par utilisateur et timestamp (le plus r√©cent en premier)
        .distinct('user')  # Conserver uniquement la derni√®re r√©ponse par utilisateur
    )
    print(f"[DEBUG] Nombre total de r√©ponses uniques r√©cup√©r√©es : {latest_responses.count()}")
    for response in latest_responses:
        print(f"[DEBUG] R√©ponse : Utilisateur={response.user.username} - Choix={response.choice.id}")

    # √âtape 4 : Calculer le total d'utilisateurs ayant r√©pondu
    total_users = latest_responses.values('user').distinct().count()
    print(f"[DEBUG] Nombre total d'utilisateurs ayant r√©pondu : {total_users}")

    # √âtape 5 : Calcul des pourcentages
    percentages = {}
    if total_users == 0:
        print("[DEBUG] Aucune r√©ponse trouv√©e. Les pourcentages sont initialis√©s √† 0.")
        percentages = {choice.id: 0 for choice in choices}
    else:
        print("[DEBUG] D√©but du calcul des pourcentages pour chaque choix.")
        for choice in choices:
            # Compter combien de fois chaque choix a √©t√© s√©lectionn√© dans les derni√®res r√©ponses
            choice_count = latest_responses.filter(choice=choice).count()
            percentage = round((choice_count / total_users) * 100, 2)
            percentages[choice.id] = percentage
            print(f"[DEBUG] Choix : {choice.id} - Nombre de r√©ponses : {choice_count} - Pourcentage : {percentage}%")

    # √âtape 6 : Retourner les pourcentages sous forme de JSON
    print(f"[DEBUG] Pourcentages calcul√©s pour la question {question_id} : {percentages}")
    return JsonResponse({
        "question_id": question.id,
        "percentages": percentages
    })


@login_required
def revision(request):
    """
    Vue pour r√©viser les chapitres associ√©s aux sujets accessibles.
    """
    try:
        # R√©cup√©rer les semestres attribu√©s √† l'utilisateur
        user_semesters = UserSemester.objects.filter(user=request.user)
        
        if not user_semesters:
            return render(request, 'revision.html', {
                'error': "Vous n'avez acc√®s √† aucun semestre.",
                'subjects': []
            })

        # R√©cup√©rer les modules accessibles via les semestres
        accessible_modules = Module.objects.filter(semester__in=[
            semester.id for user_semester in user_semesters for semester in user_semester.semesters.all()
        ])

        # R√©cup√©rer les sujets associ√©s aux modules accessibles
        subjects = Subject.objects.filter(module__in=accessible_modules).distinct()

        # R√©cup√©rer les chapitres associ√©s aux sujets accessibles
        subjects_with_chapters = []
        for subject in subjects:
            chapters = Chapter.objects.filter(subject=subject)
            subjects_with_chapters.append({
                'subject': subject,
                'chapters': chapters
            })

        # Passer les donn√©es au template
        return render(request, 'revision.html', {
            'subjects_with_chapters': subjects_with_chapters,  # Passer les sujets et chapitres au template
        })

    except Exception as e:
        return render(request, 'revision.html', {
            'error': "Une erreur est survenue lors de la r√©cup√©ration des chapitres.",
            'subjects_with_chapters': []
        })


def get_flashcards(request, chapter_id):
    try:
        chapter = Chapter.objects.get(id=chapter_id)
        flashcards = Flashcard.objects.filter(chapter=chapter).values('question', 'answer')
        return JsonResponse({'flashcards': list(flashcards)})
    except Chapter.DoesNotExist:
        return JsonResponse({'error': 'Chapitre introuvable'}, status=404)
    
@login_required
@csrf_exempt

def get_next_flashcard_id(user, chapter):
    try:
        # V√©rifiez que user est bien un utilisateur
        print(f"Utilisateur re√ßu : {user}, type : {type(user)}")

        # R√©cup√©rer toutes les flashcards pour cet utilisateur et ce chapitre
        flashcards = Flashcard.objects.filter(user=user, chapter=chapter)
        print(f"Flashcards r√©cup√©r√©es : {[f.id for f in flashcards]}")

        # Trouver le num√©ro maximum parmi les IDs existants
        max_num = 0
        for flashcard in flashcards:
            if '_' in flashcard.id:
                parts = flashcard.id.rsplit('_', 1)  # S√©pare la derni√®re partie de l'ID
                if len(parts) == 2 and parts[1].isdigit():  # V√©rifie si c'est un num√©ro
                    max_num = max(max_num, int(parts[1]))

        # Incr√©menter le num√©ro maximum pour g√©n√©rer un nouvel ID
        new_id = f"{user.username}_{chapter.name}_{max_num + 1}"
        print(f"Nouvel ID g√©n√©r√© : {new_id}")
        return new_id

    except Exception as e:
        print(f"Erreur dans get_next_flashcard_id : {str(e)}")
        raise

@login_required
@csrf_exempt
def manage_flashcards(request, chapter_id):
    """
    G√©rer les flashcards pour un utilisateur : CRUD (Create, Read, Update).
    """
    try:
        print(f"Requ√™te re√ßue : {request.method} pour le chapitre ID {chapter_id}")

        # R√©cup√©rer le chapitre
        chapter = get_object_or_404(Chapter, id=chapter_id)
        print(f"Chapitre r√©cup√©r√© : {chapter.name}")

        # V√©rifier l'utilisateur connect√©
        print(f"Utilisateur actuel : {request.user}, type : {type(request.user)}")
        if not request.user.is_authenticated:
            return JsonResponse({'error': 'Utilisateur non authentifi√©.'}, status=401)

        if request.method == "GET":
            # R√©cup√©rer les flashcards globales et celles de l'utilisateur
            flashcards = Flashcard.objects.filter(
                chapter=chapter
            ).filter(
                models.Q(is_global=True) | models.Q(user=request.user)
            ).order_by('id')
            print(f"Flashcards r√©cup√©r√©es : {flashcards}")

            flashcards_data = [
                {
                    'id': flashcard.id,
                    'question': flashcard.question,
                    'answer': flashcard.answer,
                    'is_global': flashcard.is_global
                }
                for flashcard in flashcards
            ]
            return JsonResponse({'flashcards': flashcards_data}, status=200)

        elif request.method == "POST":
            # Ajouter une nouvelle flashcard
            data = json.loads(request.body)
            print("Donn√©es re√ßues :", data)

            question = data.get('question', '').strip()
            answer = data.get('answer', '').strip()
            username = data.get('user', '').strip()  # R√©cup√©rer le nom d'utilisateur
            print(f"Utilisateur transmis dans les donn√©es : {username}")

            if not question or not answer or not username:
                print("Erreur : Donn√©es incompl√®tes.")
                return JsonResponse({'error': 'La question, la r√©ponse, et l‚Äôutilisateur sont obligatoires.'}, status=400)

            # R√©cup√©rer l'objet utilisateur
            user = User.objects.filter(username=username).first()
            print(f"Utilisateur trouv√© : {user}, type : {type(user)}")
            if not user:
                print(f"Erreur : Utilisateur '{username}' introuvable.")
                return JsonResponse({'error': f"Utilisateur '{username}' introuvable."}, status=404)

            # G√©n√©rer un nouvel ID unique
            new_id = f"{user.username}_{chapter.name}_{Flashcard.objects.filter(user=user, chapter=chapter).count() + 1}"
            print(f"Nouvel ID g√©n√©r√© : {new_id}")

            # Cr√©er une flashcard pour l'utilisateur
            flashcard = Flashcard(
                id=new_id,
                question=question,
                answer=answer,
                chapter=chapter,
                user=user  # Assigner l'objet utilisateur ici
            )
            flashcard.save()
            print(f"Flashcard cr√©√©e : {flashcard}")

            return JsonResponse({
                'message': 'Flashcard ajout√©e avec succ√®s.',
                'flashcard': {
                    'id': flashcard.id,
                    'question': flashcard.question,
                    'answer': flashcard.answer,
                }
            }, status=201)

        elif request.method == "PUT":
            data = json.loads(request.body)
            print(f"Donn√©es re√ßues pour PUT : {data}")

            flashcard_id = data.get('id')
            if not flashcard_id:
                print("Erreur : Un ID valide est requis.")
                return JsonResponse({'error': 'Un ID valide est requis.'}, status=400)

            flashcard = get_object_or_404(Flashcard, id=flashcard_id, user=request.user)
            print(f"Flashcard trouv√©e pour modification : {flashcard}")

            flashcard.question = data.get('question', flashcard.question).strip()
            flashcard.answer = data.get('answer', flashcard.answer).strip()
            flashcard.save()
            print(f"Flashcard modifi√©e : {flashcard}")

            return JsonResponse({
                'message': 'Flashcard modifi√©e avec succ√®s.',
                'flashcard': {
                    'id': flashcard.id,
                    'question': flashcard.question,
                    'answer': flashcard.answer,
                }
            }, status=200)

        else:
            print("Erreur : M√©thode non autoris√©e.")
            return JsonResponse({'error': 'M√©thode non autoris√©e.'}, status=405)

    except Exception as e:
        print(f"Erreur inattendue : {str(e)}")
        return JsonResponse({'error': f'Une erreur est survenue : {str(e)}'}, status=500)

